DROP TABLE IF EXISTS film_genres;
DROP TABLE IF EXISTS film_directors;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS log_event;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS reviews_likes;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS log_event;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS rating_mpa;
DROP TABLE IF EXISTS directors;

CREATE TABLE IF NOT EXISTS genres
(
    genre_id INT          NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre    VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS mpa_rating
(
    rating_id INT          NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating    VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id       INT          NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(255) NOT NULL,
    description   VARCHAR(200) NOT NULL,
    release_date  TIMESTAMP    NOT NULL,
    duration      INT          NOT NULL,
    mpa_rating_id INT REFERENCES mpa_rating (rating_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS users
(
    user_id  INT          NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login    VARCHAR(255) NOT NULL,
    name     VARCHAR(255),
    email    VARCHAR(255) NOT NULL,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  INT NOT NULL REFERENCES films (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    genre_id INT NOT NULL REFERENCES genres (genre_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id INT NOT NULL REFERENCES films (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    user_id INT NOT NULL REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id   INT     NOT NULL REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    friend_id INT     NOT NULL REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    status    BOOLEAN NOT NULL
);

create TABLE IF NOT EXISTS directors
(
    director_id INT          NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(255) NOT NULL
);

create TABLE IF NOT EXISTS film_directors
(
    film_id     INT NOT NULL REFERENCES films (film_id) ON delete CASCADE ON update CASCADE,
    director_id INT NOT NULL REFERENCES directors (director_id) ON delete CASCADE ON update CASCADE
);

CREATE TABLE if not exists reviews
(
    id          int4    NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    film_id     int4    NOT NULL,
    user_id     int4    NOT NULL REFERENCES films (film_id) ON delete CASCADE ON update CASCADE,
    content     varchar NULL,
    is_positive bool    NOT NULL,
    CONSTRAINT reviews_pk PRIMARY KEY (id),
    CONSTRAINT reviews_fk FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT reviews_fk_1 FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE if not exists reviews_likes
(
    review_id int4 NOT NULL,
    user_id   int4 NOT NULL,
    grade     int4 NULL,
    CONSTRAINT reviews_likes_fk FOREIGN KEY (review_id) REFERENCES reviews (id) ON DELETE CASCADE,
    CONSTRAINT reviews_likes_fk_1 FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS log_event
(
    user_id    INT                               NOT NULL,
    timestamp  TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    event_type ENUM ('LIKE', 'REVIEW', 'FRIEND') NOT NULL,
    operation  ENUM ('REMOVE', 'ADD', 'UPDATE')  NOT NULL,
    event_id   INT                               NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_id  INT                               NOT NULL
);
